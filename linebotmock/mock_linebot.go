// Code generated by MockGen. DO NOT EDIT.
// Source: linebot.go

// Package mock_lime is a generated GoMock package.
package mock_lime

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockLineBotClient is a mock of LineBotClient interface.
type MockLineBotClient struct {
	ctrl     *gomock.Controller
	recorder *MockLineBotClientMockRecorder
}

// MockLineBotClientMockRecorder is the mock recorder for MockLineBotClient.
type MockLineBotClientMockRecorder struct {
	mock *MockLineBotClient
}

// NewMockLineBotClient creates a new mock instance.
func NewMockLineBotClient(ctrl *gomock.Controller) *MockLineBotClient {
	mock := &MockLineBotClient{ctrl: ctrl}
	mock.recorder = &MockLineBotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineBotClient) EXPECT() *MockLineBotClientMockRecorder {
	return m.recorder
}

// ActivateAudienceGroup mocks base method.
func (m *MockLineBotClient) ActivateAudienceGroup(audienceGroupID int) *linebot.ActivateAudienceGroupCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAudienceGroup", audienceGroupID)
	ret0, _ := ret[0].(*linebot.ActivateAudienceGroupCall)
	return ret0
}

// ActivateAudienceGroup indicates an expected call of ActivateAudienceGroup.
func (mr *MockLineBotClientMockRecorder) ActivateAudienceGroup(audienceGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).ActivateAudienceGroup), audienceGroupID)
}

// AddAudiences mocks base method.
func (m *MockLineBotClient) AddAudiences(audienceGroupID int, audiences []string, options ...linebot.IAddAudiencesOption) *linebot.AddAudiencesCall {
	m.ctrl.T.Helper()
	varargs := []interface{}{audienceGroupID, audiences}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAudiences", varargs...)
	ret0, _ := ret[0].(*linebot.AddAudiencesCall)
	return ret0
}

// AddAudiences indicates an expected call of AddAudiences.
func (mr *MockLineBotClientMockRecorder) AddAudiences(audienceGroupID, audiences interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{audienceGroupID, audiences}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAudiences", reflect.TypeOf((*MockLineBotClient)(nil).AddAudiences), varargs...)
}

// AddAudiencesByFile mocks base method.
func (m *MockLineBotClient) AddAudiencesByFile(audienceGroupID int, audiences []string, options ...linebot.IAddAudiencesByFileOption) *linebot.AddAudiencesByFileCall {
	m.ctrl.T.Helper()
	varargs := []interface{}{audienceGroupID, audiences}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAudiencesByFile", varargs...)
	ret0, _ := ret[0].(*linebot.AddAudiencesByFileCall)
	return ret0
}

// AddAudiencesByFile indicates an expected call of AddAudiencesByFile.
func (mr *MockLineBotClientMockRecorder) AddAudiencesByFile(audienceGroupID, audiences interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{audienceGroupID, audiences}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAudiencesByFile", reflect.TypeOf((*MockLineBotClient)(nil).AddAudiencesByFile), varargs...)
}

// AddLIFF mocks base method.
func (m *MockLineBotClient) AddLIFF(app linebot.LIFFApp) *linebot.AddLIFFCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLIFF", app)
	ret0, _ := ret[0].(*linebot.AddLIFFCall)
	return ret0
}

// AddLIFF indicates an expected call of AddLIFF.
func (mr *MockLineBotClientMockRecorder) AddLIFF(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLIFF", reflect.TypeOf((*MockLineBotClient)(nil).AddLIFF), app)
}

// ChangeAudienceGroupAuthorityLevel mocks base method.
func (m *MockLineBotClient) ChangeAudienceGroupAuthorityLevel(authorityLevel linebot.AudienceAuthorityLevelType) *linebot.ChangeAudienceGroupAuthorityLevelCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAudienceGroupAuthorityLevel", authorityLevel)
	ret0, _ := ret[0].(*linebot.ChangeAudienceGroupAuthorityLevelCall)
	return ret0
}

// ChangeAudienceGroupAuthorityLevel indicates an expected call of ChangeAudienceGroupAuthorityLevel.
func (mr *MockLineBotClientMockRecorder) ChangeAudienceGroupAuthorityLevel(authorityLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAudienceGroupAuthorityLevel", reflect.TypeOf((*MockLineBotClient)(nil).ChangeAudienceGroupAuthorityLevel), authorityLevel)
}

// ClickAudienceGroup mocks base method.
func (m *MockLineBotClient) ClickAudienceGroup(description, requestID string, options ...linebot.IClickAudienceGroupOption) *linebot.ClickAudienceGroupCall {
	m.ctrl.T.Helper()
	varargs := []interface{}{description, requestID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClickAudienceGroup", varargs...)
	ret0, _ := ret[0].(*linebot.ClickAudienceGroupCall)
	return ret0
}

// ClickAudienceGroup indicates an expected call of ClickAudienceGroup.
func (mr *MockLineBotClientMockRecorder) ClickAudienceGroup(description, requestID interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{description, requestID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).ClickAudienceGroup), varargs...)
}

// DeleteAudienceGroup mocks base method.
func (m *MockLineBotClient) DeleteAudienceGroup(audienceGroupID int) *linebot.DeleteAudienceGroupCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudienceGroup", audienceGroupID)
	ret0, _ := ret[0].(*linebot.DeleteAudienceGroupCall)
	return ret0
}

// DeleteAudienceGroup indicates an expected call of DeleteAudienceGroup.
func (mr *MockLineBotClientMockRecorder) DeleteAudienceGroup(audienceGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).DeleteAudienceGroup), audienceGroupID)
}

// DeleteLIFF mocks base method.
func (m *MockLineBotClient) DeleteLIFF(liffID string) *linebot.DeleteLIFFCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLIFF", liffID)
	ret0, _ := ret[0].(*linebot.DeleteLIFFCall)
	return ret0
}

// DeleteLIFF indicates an expected call of DeleteLIFF.
func (mr *MockLineBotClientMockRecorder) DeleteLIFF(liffID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLIFF", reflect.TypeOf((*MockLineBotClient)(nil).DeleteLIFF), liffID)
}

// GetAudienceGroup mocks base method.
func (m *MockLineBotClient) GetAudienceGroup(audienceGroupID int) *linebot.GetAudienceGroupCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceGroup", audienceGroupID)
	ret0, _ := ret[0].(*linebot.GetAudienceGroupCall)
	return ret0
}

// GetAudienceGroup indicates an expected call of GetAudienceGroup.
func (mr *MockLineBotClientMockRecorder) GetAudienceGroup(audienceGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).GetAudienceGroup), audienceGroupID)
}

// GetAudienceGroupAuthorityLevel mocks base method.
func (m *MockLineBotClient) GetAudienceGroupAuthorityLevel() *linebot.GetAudienceGroupAuthorityLevelCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceGroupAuthorityLevel")
	ret0, _ := ret[0].(*linebot.GetAudienceGroupAuthorityLevelCall)
	return ret0
}

// GetAudienceGroupAuthorityLevel indicates an expected call of GetAudienceGroupAuthorityLevel.
func (mr *MockLineBotClientMockRecorder) GetAudienceGroupAuthorityLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceGroupAuthorityLevel", reflect.TypeOf((*MockLineBotClient)(nil).GetAudienceGroupAuthorityLevel))
}

// GetBotInfo mocks base method.
func (m *MockLineBotClient) GetBotInfo() *linebot.GetBotInfoCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotInfo")
	ret0, _ := ret[0].(*linebot.GetBotInfoCall)
	return ret0
}

// GetBotInfo indicates an expected call of GetBotInfo.
func (mr *MockLineBotClientMockRecorder) GetBotInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotInfo", reflect.TypeOf((*MockLineBotClient)(nil).GetBotInfo))
}

// GetFollowerIDs mocks base method.
func (m *MockLineBotClient) GetFollowerIDs(continuationToken string) *linebot.GetFollowerIDsCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowerIDs", continuationToken)
	ret0, _ := ret[0].(*linebot.GetFollowerIDsCall)
	return ret0
}

// GetFollowerIDs indicates an expected call of GetFollowerIDs.
func (mr *MockLineBotClientMockRecorder) GetFollowerIDs(continuationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerIDs", reflect.TypeOf((*MockLineBotClient)(nil).GetFollowerIDs), continuationToken)
}

// GetFriendDemographics mocks base method.
func (m *MockLineBotClient) GetFriendDemographics() *linebot.GetFriendDemographicsCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendDemographics")
	ret0, _ := ret[0].(*linebot.GetFriendDemographicsCall)
	return ret0
}

// GetFriendDemographics indicates an expected call of GetFriendDemographics.
func (mr *MockLineBotClientMockRecorder) GetFriendDemographics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendDemographics", reflect.TypeOf((*MockLineBotClient)(nil).GetFriendDemographics))
}

// GetGroupMemberCount mocks base method.
func (m *MockLineBotClient) GetGroupMemberCount(groupID string) *linebot.GetGroupMemberCountCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMemberCount", groupID)
	ret0, _ := ret[0].(*linebot.GetGroupMemberCountCall)
	return ret0
}

// GetGroupMemberCount indicates an expected call of GetGroupMemberCount.
func (mr *MockLineBotClientMockRecorder) GetGroupMemberCount(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMemberCount", reflect.TypeOf((*MockLineBotClient)(nil).GetGroupMemberCount), groupID)
}

// GetGroupSummary mocks base method.
func (m *MockLineBotClient) GetGroupSummary(groupID string) *linebot.GetGroupSummaryCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSummary", groupID)
	ret0, _ := ret[0].(*linebot.GetGroupSummaryCall)
	return ret0
}

// GetGroupSummary indicates an expected call of GetGroupSummary.
func (mr *MockLineBotClientMockRecorder) GetGroupSummary(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSummary", reflect.TypeOf((*MockLineBotClient)(nil).GetGroupSummary), groupID)
}

// GetLIFF mocks base method.
func (m *MockLineBotClient) GetLIFF() *linebot.GetLIFFAllCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLIFF")
	ret0, _ := ret[0].(*linebot.GetLIFFAllCall)
	return ret0
}

// GetLIFF indicates an expected call of GetLIFF.
func (mr *MockLineBotClientMockRecorder) GetLIFF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLIFF", reflect.TypeOf((*MockLineBotClient)(nil).GetLIFF))
}

// GetMessageConsumption mocks base method.
func (m *MockLineBotClient) GetMessageConsumption() *linebot.GetMessageConsumptionCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageConsumption")
	ret0, _ := ret[0].(*linebot.GetMessageConsumptionCall)
	return ret0
}

// GetMessageConsumption indicates an expected call of GetMessageConsumption.
func (mr *MockLineBotClientMockRecorder) GetMessageConsumption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageConsumption", reflect.TypeOf((*MockLineBotClient)(nil).GetMessageConsumption))
}

// GetMessageQuota mocks base method.
func (m *MockLineBotClient) GetMessageQuota() *linebot.GetMessageQuotaCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageQuota")
	ret0, _ := ret[0].(*linebot.GetMessageQuotaCall)
	return ret0
}

// GetMessageQuota indicates an expected call of GetMessageQuota.
func (mr *MockLineBotClientMockRecorder) GetMessageQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageQuota", reflect.TypeOf((*MockLineBotClient)(nil).GetMessageQuota))
}

// GetMessageQuotaConsumption mocks base method.
func (m *MockLineBotClient) GetMessageQuotaConsumption() *linebot.GetMessageQuotaCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageQuotaConsumption")
	ret0, _ := ret[0].(*linebot.GetMessageQuotaCall)
	return ret0
}

// GetMessageQuotaConsumption indicates an expected call of GetMessageQuotaConsumption.
func (mr *MockLineBotClientMockRecorder) GetMessageQuotaConsumption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageQuotaConsumption", reflect.TypeOf((*MockLineBotClient)(nil).GetMessageQuotaConsumption))
}

// GetNumberFollowers mocks base method.
func (m *MockLineBotClient) GetNumberFollowers(date string) *linebot.GetNumberFollowersCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberFollowers", date)
	ret0, _ := ret[0].(*linebot.GetNumberFollowersCall)
	return ret0
}

// GetNumberFollowers indicates an expected call of GetNumberFollowers.
func (mr *MockLineBotClientMockRecorder) GetNumberFollowers(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberFollowers", reflect.TypeOf((*MockLineBotClient)(nil).GetNumberFollowers), date)
}

// GetNumberMessagesDelivery mocks base method.
func (m *MockLineBotClient) GetNumberMessagesDelivery(date string) *linebot.GetNumberMessagesDeliveryCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberMessagesDelivery", date)
	ret0, _ := ret[0].(*linebot.GetNumberMessagesDeliveryCall)
	return ret0
}

// GetNumberMessagesDelivery indicates an expected call of GetNumberMessagesDelivery.
func (mr *MockLineBotClientMockRecorder) GetNumberMessagesDelivery(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberMessagesDelivery", reflect.TypeOf((*MockLineBotClient)(nil).GetNumberMessagesDelivery), date)
}

// GetRoomMemberCount mocks base method.
func (m *MockLineBotClient) GetRoomMemberCount(roomID string) *linebot.GetRoomMemberCountCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomMemberCount", roomID)
	ret0, _ := ret[0].(*linebot.GetRoomMemberCountCall)
	return ret0
}

// GetRoomMemberCount indicates an expected call of GetRoomMemberCount.
func (mr *MockLineBotClientMockRecorder) GetRoomMemberCount(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomMemberCount", reflect.TypeOf((*MockLineBotClient)(nil).GetRoomMemberCount), roomID)
}

// GetUserInteractionStats mocks base method.
func (m *MockLineBotClient) GetUserInteractionStats(requestID string) *linebot.GetUserInteractionStatsCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInteractionStats", requestID)
	ret0, _ := ret[0].(*linebot.GetUserInteractionStatsCall)
	return ret0
}

// GetUserInteractionStats indicates an expected call of GetUserInteractionStats.
func (mr *MockLineBotClientMockRecorder) GetUserInteractionStats(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInteractionStats", reflect.TypeOf((*MockLineBotClient)(nil).GetUserInteractionStats), requestID)
}

// IMPAudienceGroup mocks base method.
func (m *MockLineBotClient) IMPAudienceGroup(description, requestID string) *linebot.IMPAudienceGroupCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IMPAudienceGroup", description, requestID)
	ret0, _ := ret[0].(*linebot.IMPAudienceGroupCall)
	return ret0
}

// IMPAudienceGroup indicates an expected call of IMPAudienceGroup.
func (mr *MockLineBotClientMockRecorder) IMPAudienceGroup(description, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IMPAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).IMPAudienceGroup), description, requestID)
}

// LeaveGroup mocks base method.
func (m *MockLineBotClient) LeaveGroup(groupID string) *linebot.LeaveGroupCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveGroup", groupID)
	ret0, _ := ret[0].(*linebot.LeaveGroupCall)
	return ret0
}

// LeaveGroup indicates an expected call of LeaveGroup.
func (mr *MockLineBotClientMockRecorder) LeaveGroup(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveGroup", reflect.TypeOf((*MockLineBotClient)(nil).LeaveGroup), groupID)
}

// LeaveRoom mocks base method.
func (m *MockLineBotClient) LeaveRoom(roomID string) *linebot.LeaveRoomCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveRoom", roomID)
	ret0, _ := ret[0].(*linebot.LeaveRoomCall)
	return ret0
}

// LeaveRoom indicates an expected call of LeaveRoom.
func (mr *MockLineBotClientMockRecorder) LeaveRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveRoom", reflect.TypeOf((*MockLineBotClient)(nil).LeaveRoom), roomID)
}

// ListAudienceGroup mocks base method.
func (m *MockLineBotClient) ListAudienceGroup(page int, options ...linebot.IListAudienceGroupOption) *linebot.ListAudienceGroupCall {
	m.ctrl.T.Helper()
	varargs := []interface{}{page}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAudienceGroup", varargs...)
	ret0, _ := ret[0].(*linebot.ListAudienceGroupCall)
	return ret0
}

// ListAudienceGroup indicates an expected call of ListAudienceGroup.
func (mr *MockLineBotClientMockRecorder) ListAudienceGroup(page interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{page}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).ListAudienceGroup), varargs...)
}

// NewRawCall mocks base method.
func (m *MockLineBotClient) NewRawCall(method, endpoint string) (*linebot.RawCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRawCall", method, endpoint)
	ret0, _ := ret[0].(*linebot.RawCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRawCall indicates an expected call of NewRawCall.
func (mr *MockLineBotClientMockRecorder) NewRawCall(method, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRawCall", reflect.TypeOf((*MockLineBotClient)(nil).NewRawCall), method, endpoint)
}

// NewRawCallWithBody mocks base method.
func (m *MockLineBotClient) NewRawCallWithBody(method, endpoint string, body io.Reader) (*linebot.RawCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRawCallWithBody", method, endpoint, body)
	ret0, _ := ret[0].(*linebot.RawCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRawCallWithBody indicates an expected call of NewRawCallWithBody.
func (mr *MockLineBotClientMockRecorder) NewRawCallWithBody(method, endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRawCallWithBody", reflect.TypeOf((*MockLineBotClient)(nil).NewRawCallWithBody), method, endpoint, body)
}

// UpdateAudienceGroupDescription mocks base method.
func (m *MockLineBotClient) UpdateAudienceGroupDescription(audienceGroupID int, description string) *linebot.UpdateAudienceGroupDescriptionCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAudienceGroupDescription", audienceGroupID, description)
	ret0, _ := ret[0].(*linebot.UpdateAudienceGroupDescriptionCall)
	return ret0
}

// UpdateAudienceGroupDescription indicates an expected call of UpdateAudienceGroupDescription.
func (mr *MockLineBotClientMockRecorder) UpdateAudienceGroupDescription(audienceGroupID, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAudienceGroupDescription", reflect.TypeOf((*MockLineBotClient)(nil).UpdateAudienceGroupDescription), audienceGroupID, description)
}

// UpdateLIFF mocks base method.
func (m *MockLineBotClient) UpdateLIFF(liffID string, app linebot.LIFFApp) *linebot.UpdateLIFFCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLIFF", liffID, app)
	ret0, _ := ret[0].(*linebot.UpdateLIFFCall)
	return ret0
}

// UpdateLIFF indicates an expected call of UpdateLIFF.
func (mr *MockLineBotClientMockRecorder) UpdateLIFF(liffID, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLIFF", reflect.TypeOf((*MockLineBotClient)(nil).UpdateLIFF), liffID, app)
}

// UploadAudienceGroup mocks base method.
func (m *MockLineBotClient) UploadAudienceGroup(description string, options ...linebot.IUploadAudienceGroupOption) *linebot.UploadAudienceGroupCall {
	m.ctrl.T.Helper()
	varargs := []interface{}{description}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAudienceGroup", varargs...)
	ret0, _ := ret[0].(*linebot.UploadAudienceGroupCall)
	return ret0
}

// UploadAudienceGroup indicates an expected call of UploadAudienceGroup.
func (mr *MockLineBotClientMockRecorder) UploadAudienceGroup(description interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{description}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAudienceGroup", reflect.TypeOf((*MockLineBotClient)(nil).UploadAudienceGroup), varargs...)
}

// UploadAudienceGroupByFile mocks base method.
func (m *MockLineBotClient) UploadAudienceGroupByFile(description string, audiences []string, options ...linebot.IUploadAudienceGroupByFileOption) *linebot.UploadAudienceGroupByFileCall {
	m.ctrl.T.Helper()
	varargs := []interface{}{description, audiences}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAudienceGroupByFile", varargs...)
	ret0, _ := ret[0].(*linebot.UploadAudienceGroupByFileCall)
	return ret0
}

// UploadAudienceGroupByFile indicates an expected call of UploadAudienceGroupByFile.
func (mr *MockLineBotClientMockRecorder) UploadAudienceGroupByFile(description, audiences interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{description, audiences}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAudienceGroupByFile", reflect.TypeOf((*MockLineBotClient)(nil).UploadAudienceGroupByFile), varargs...)
}
